'use client';

import { useEffect, useState } from 'react';
import { apiFetch } from '@/lib/api';
import { PostQueue, GeneratedPost } from '@/types';
import { DataTable } from '@/components/DataTable';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { X as XIcon } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Trash2, RefreshCw, Plus } from 'lucide-react';
import { toast } from 'sonner';
import { format } from 'date-fns';
import { formatDateSafe } from '@/lib/utils';

export default function PostsPage() {
  const [queue, setQueue] = useState<PostQueue[]>([]);
  const [generated, setGenerated] = useState<GeneratedPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [formData, setFormData] = useState({
    caption: '',
    media_prompt: '',
    media_url: '',
    scheduled_at: '',
    priority: 0,
    type: 'image',
  });
  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>(['twitter']);
  const [scheduling, setScheduling] = useState(false);

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      const [queueData, generatedData] = await Promise.all([
        apiFetch<PostQueue[]>('/admin/queue'),
        apiFetch<GeneratedPost[]>('/admin/generated'),
      ]);
      setQueue(queueData);
      setGenerated(generatedData);
    } catch (error) {
      toast.error('Failed to fetch posts');
    } finally {
      setLoading(false);
    }
  };

  const handleSchedulePost = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await apiFetch('/admin/schedule-post', {
        method: 'POST',
        body: JSON.stringify(formData),
      });
      toast.success('Post scheduled successfully');
      setDialogOpen(false);
      fetchPosts();
      setFormData({ caption: '', media_prompt: '', media_url: '', scheduled_at: '', priority: 0, type: 'image' });
      setSelectedPlatforms(['twitter']);
    } catch (error) {
      toast.error('Failed to schedule post');
    }
  };

  const handleRetryFailed = async () => {
    try {
      const result = await apiFetch<{ retried: number }>('/admin/retry-failed', {
        method: 'POST',
      });
      toast.success(`${result.retried} posts retried`);
      fetchPosts();
    } catch (error) {
      toast.error('Failed to retry posts');
    }
  };

  const handleDeletePost = async (id: string) => {
    if (!confirm('Are you sure you want to delete this post?')) return;
    try {
      await apiFetch(`/admin/${id}`, { method: 'DELETE' });
      toast.success('Post deleted');
      fetchPosts();
    } catch (error) {
      toast.error('Failed to delete post');
    }
  };

  const queueColumns = [
    { header: 'Platform', accessor: 'platform' as keyof PostQueue },
    {
      header: 'Caption',
      accessor: (row: PostQueue) => (
        <div className="max-w-md truncate">{row.caption || 'N/A'}</div>
      ),
    },
    {
      header: 'Status',
      accessor: (row: PostQueue) => (
        <Badge
          variant={
            row.status === 'posted'
              ? 'default'
              : row.status === 'failed'
              ? 'destructive'
              : 'secondary'
          }
        >
          {row.status}
        </Badge>
      ),
    },
    {
      header: 'Scheduled',
      accessor: (row: PostQueue) =>
  row.scheduled_at ? formatDateSafe(row.scheduled_at, 'MMM d, yyyy HH:mm', 'N/A') : 'N/A',
    },
    { header: 'Priority', accessor: 'priority' as keyof PostQueue },
  ];

  const generatedColumns = [
    { header: 'Platform', accessor: 'platform' as keyof GeneratedPost },
    {
      header: 'Caption',
      accessor: (row: GeneratedPost) => (
        <div className="max-w-md truncate">{row.caption}</div>
      ),
    },
    { header: 'Generated By', accessor: 'generated_by' as keyof GeneratedPost },
    {
      header: 'Queued',
      accessor: (row: GeneratedPost) => (row.queued ? 'Yes' : 'No'),
    },
    {
      header: 'Created',
      accessor: (row: GeneratedPost) =>
  formatDateSafe(row.created_at, 'MMM d, yyyy', 'Invalid date'),
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Posts</h1>
          <p className="text-gray-600 mt-1">Manage post queue and generated content</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleRetryFailed}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry Failed
          </Button>
          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Schedule Post
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Schedule New Post</DialogTitle>
              </DialogHeader>
              <form
                onSubmit={async (e) => {
                  e.preventDefault();
                  setScheduling(true);
                  try {
                    // allow comma-separated platforms in the select value
                    const platforms: string[] = selectedPlatforms.slice();

                    const tasks = platforms.map((p: string) =>
                      apiFetch('/admin/schedule-post', {
                        method: 'POST',
                        body: JSON.stringify({
                          platform: p,
                          media_prompt: formData.media_prompt,
                          scheduled_at: formData.scheduled_at || null,
                        }),
                      })
                    );

                    await Promise.all(tasks);
                    toast.success('Post(s) scheduled');
                    setDialogOpen(false);
                    fetchPosts();
                    setFormData({ caption: '', media_prompt: '', media_url: '', scheduled_at: '', priority: 0, type: 'image' });
                    setSelectedPlatforms(['twitter']);
                  } catch (err) {
                    toast.error('Failed to schedule post(s)');
                  } finally {
                    setScheduling(false);
                  }
                }}
                className="space-y-4"
              >
                <div>
                  <Label>Platform</Label>
                  <div>
                    <Select
                      value=""
                      onValueChange={(value) => {
                        if (!value) return;
                        setSelectedPlatforms((s) => (s.includes(value) ? s : [...s, value]));
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select platform..." />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="instagram">Instagram</SelectItem>
                        <SelectItem value="twitter">Twitter</SelectItem>
                        <SelectItem value="tiktok">TikTok</SelectItem>
                        <SelectItem value="facebook">Facebook</SelectItem>
                        <SelectItem value="reddit">Reddit</SelectItem>
                        <SelectItem value="telegram">Telegram</SelectItem>
                        <SelectItem value="pinterest">Pinterest</SelectItem>
                        <SelectItem value="snapchat">Snapchat</SelectItem>
                        <SelectItem value="linkedin">LinkedIn</SelectItem>
                        <SelectItem value="quora">Quora</SelectItem>
                        <SelectItem value="discord">Discord</SelectItem>
                        <SelectItem value="gmb">GMB</SelectItem>
                      </SelectContent>
                    </Select>
                    <div className="mt-3 flex flex-wrap gap-2">
                      {selectedPlatforms.map((p) => (
                        <span key={p} className="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-muted text-sm">
                          <span className="capitalize">{p}</span>
                          <button
                            type="button"
                            onClick={() => setSelectedPlatforms((s) => s.filter((x) => x !== p))}
                            className="inline-flex items-center justify-center h-5 w-5 rounded-full hover:bg-muted/60"
                          >
                            <XIcon className="h-3 w-3" />
                          </button>
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
                <div>
                  <Label>Caption</Label>
                  <Textarea
                    value={formData.caption}
                    onChange={(e) => setFormData({ ...formData, caption: e.target.value })}
                    placeholder="Write a caption..."
                    required
                  />
                </div>
                <div>
                  <Label>Media Prompt</Label>
                  <Input
                    value={formData.media_prompt}
                    onChange={(e) => setFormData({ ...formData, media_prompt: e.target.value })}
                    placeholder="Describe the content to generate..."
                    required
                  />
                </div>
                <div>
                  <Label>Media URL</Label>
                  <Input
                    value={formData.media_url}
                    onChange={(e) => setFormData({ ...formData, media_url: e.target.value })}
                  />
                </div>
                <div>
                  <Label>Priority</Label>
                  <Input
                    type="number"
                    value={String(formData.priority)}
                    onChange={(e) => setFormData({ ...formData, priority: Number(e.target.value) })}
                  />
                </div>
                <div>
                  <Label>Scheduled Date/Time</Label>
                  <Input
                    type="datetime-local"
                    value={formData.scheduled_at}
                    onChange={(e) => setFormData({ ...formData, scheduled_at: e.target.value })}
                  />
                </div>
                <div>
                  <Label>Type</Label>
                  <select
                    value={formData.type}
                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                    className="w-full rounded-md border px-3 py-2"
                  >
                    <option value="image">Image</option>
                    <option value="video">Video</option>
                  </select>
                </div>
                <div className="flex gap-2 justify-end">
                  <Button variant="outline" type="button" onClick={() => setDialogOpen(false)} disabled={scheduling}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={scheduling || selectedPlatforms.length === 0}>
                    {scheduling ? 'Scheduling...' : 'Submit'}
                  </Button>
                </div>
              </form>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      <Tabs defaultValue="queue" className="space-y-4">
        <TabsList>
          <TabsTrigger value="queue">Post Queue ({queue.length})</TabsTrigger>
          <TabsTrigger value="generated">Generated ({generated.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="queue">
          <Card>
            <CardHeader>
              <CardTitle>Post Queue</CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="text-center py-8">Loading posts...</div>
              ) : (
                <DataTable
                  data={queue}
                  columns={queueColumns}
                  actions={(row) => (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDeletePost(row.id)}
                    >
                      <Trash2 className="h-4 w-4 text-red-600" />
                    </Button>
                  )}
                />
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="generated">
          <Card>
            <CardHeader>
              <CardTitle>Generated Posts</CardTitle>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="text-center py-8">Loading posts...</div>
              ) : (
                <DataTable data={generated} columns={generatedColumns} />
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
